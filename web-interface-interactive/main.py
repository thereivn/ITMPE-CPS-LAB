import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy.stats import erlang, norm, uniform, f
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import Pipeline
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
if 'theme' not in st.session_state:
    st.session_state.theme = "dark"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
if 'font_size' not in st.session_state:
    st.session_state.font_size = "medium"
if 'results' not in st.session_state:
    st.session_state.results = None
if 'all_data' not in st.session_state:
    st.session_state.all_data = None

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —à—Ä–∏—Ñ—Ç–∞
font_configs = {
    "small": {
        "base": "14px",
        "h1": "28px",
        "h2": "22px", 
        "h3": "18px",
        "body": "14px",
        "small": "12px",
        "metric": "13px",
        "plot_title": 16,
        "plot_axis": 12,
        "plot_legend": 11
    },
    "medium": {
        "base": "16px",
        "h1": "32px",
        "h2": "24px",
        "h3": "20px", 
        "body": "16px",
        "small": "14px",
        "metric": "15px",
        "plot_title": 18,
        "plot_axis": 14,
        "plot_legend": 13
    },
    "large": {
        "base": "18px",
        "h1": "36px",
        "h2": "28px",
        "h3": "24px",
        "body": "18px", 
        "small": "16px",
        "metric": "17px",
        "plot_title": 20,
        "plot_axis": 16,
        "plot_legend": 15
    }
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–æ–π –∏ —Ä–∞–∑–º–µ—Ä–æ–º —Ç–µ–∫—Å—Ç–∞
def apply_custom_styles():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–º—ã –∏ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞"""
    
    fs = font_configs[st.session_state.font_size]
    
    # –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —à—Ä–∏—Ñ—Ç–æ–≤
    base_css = f"""
    <style>
        /* –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤ */
        html, body, [class*="css"] {{
            font-size: {fs['base']} !important;
        }}
        
        /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
        h1 {{
            font-size: {fs['h1']} !important;
        }}
        h2 {{
            font-size: {fs['h2']} !important;
        }}
        h3 {{
            font-size: {fs['h3']} !important;
        }}
        
        /* –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç */
        .stMarkdown {{
            font-size: {fs['body']} !important;
        }}
        
        /* –ú–µ–ª–∫–∏–π —Ç–µ–∫—Å—Ç */
        .stCaption, .stTooltip {{
            font-size: {fs['small']} !important;
        }}
        
        /* –ú–µ—Ç—Ä–∏–∫–∏ –∏ –∫–∞—Ä—Ç–æ—á–∫–∏ */
        .metric-card {{
            font-size: {fs['metric']} !important;
        }}
        
        /* –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º */
        .stSelectbox, .stMultiselect, .stSlider, .stButton, .stTextInput {{
            font-size: {fs['body']} !important;
        }}
        
        /* –¢–∞–±–ª–∏—Ü—ã */
        .stDataFrame {{
            font-size: {fs['body']} !important;
        }}
        
        /* –í–∫–ª–∞–¥–∫–∏ */
        .stTabs {{
            font-size: {fs['body']} !important;
        }}
        
        /* –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ —ç–∫—Å–ø–∞–Ω–¥–µ—Ä–æ–≤ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã */
        .main .streamlit-expanderHeader {{
            color: #31333F !important;
        }}
        
        .main .streamlit-expanderHeader:hover {{
            color: #2E86AB !important;
        }}
        
        /* –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π —ç–∫—Å–ø–∞–Ω–¥–µ—Ä - –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∏–Ω–µ–º —Ñ–æ–Ω–µ */
        .main .streamlit-expanderHeader[aria-expanded="true"] {{
            color: #FFFFFF !important;
            background-color: #2E86AB !important;
        }}
        
        /* –ò–∫–æ–Ω–∫–∏ —ç–∫—Å–ø–∞–Ω–¥–µ—Ä–æ–≤ */
        .main .streamlit-expanderIcon {{
            color: #31333F !important;
        }}
        
        .main .streamlit-expanderHeader[aria-expanded="true"] .streamlit-expanderIcon {{
            color: #FFFFFF !important;
        }}
    </style>
    """
    
    # –°—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    dark_theme_css = f"""
    <style>
        /* –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã */
        .main {{
            background-color: #0E1117;
            color: #FAFAFA;
        }}
        
        .stApp {{
            background-color: #0E1117;
        }}
        
        /* –°–∞–π–¥–±–∞—Ä */
        .css-1d391kg {{
            background-color: #262730;
        }}
        
        /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ - –ë–ï–õ–´–ï –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ */
        .sidebar-header {{
            color: #FAFAFA !important;
            font-size: {fs['h2']} !important;
        }}
        
        /* –¢–µ–∫—Å—Ç */
        .stMarkdown {{
            color: #FAFAFA;
        }}
        
        h1, h2, h3, h4, h5, h6 {{
            color: #FAFAFA;
        }}
        
        /* –í–∫–ª–∞–¥–∫–∏ - –ë–ï–õ–´–ï –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ */
        .stTabs [data-baseweb="tab"] {{
            background-color: #262730 !important;
            color: #FAFAFA !important;
        }}
        
        .stTabs [data-baseweb="tab"]:hover {{
            background-color: #333541 !important;
            color: #FAFAFA !important;
        }}
        
        .stTabs [aria-selected="true"] {{
            background-color: #66B3FF !important;
            color: #0E1117 !important;
        }}
        
        /* –ö–∞—Ä—Ç–æ—á–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏ */
        .result-card {{
            background-color: #262730;
            color: #FAFAFA;
            border-left: 5px solid #66B3FF;
        }}
        
        .instruction-box {{
            background-color: #262730;
            color: #FAFAFA;
            border-left: 5px solid #66B3FF;
        }}
        
        .tooltip {{
            background-color: #262730;
            color: #FAFAFA;
            border-left: 3px solid #66B3FF;
        }}
        
        /* Expanders - –≤–∏–¥–∏–º—ã–µ –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ */
        .stExpander {{
            border: 1px solid #66B3FF !important;
            border-radius: 5px;
        }}
        
        .stExpander > div > div {{
            background-color: #262730 !important;
            color: #FAFAFA !important;
        }}
        
        /* –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º */
        .stSelectbox > div > div {{
            background-color: #262730;
            color: #FAFAFA;
        }}
        
        .stMultiselect > div > div {{
            background-color: #262730;
            color: #FAFAFA;
        }}
        
        .stTextInput > div > div > input {{
            background-color: #262730;
            color: #FAFAFA;
        }}
        
        .stSlider > div > div > div {{
            color: #FAFAFA;
        }}
        
        /* –ú–µ—Ç—Ä–∏–∫–∏ –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ */
        .stMetric {{
            color: #FAFAFA !important;
        }}
        [data-testid="stMetricValue"], [data-testid="stMetricLabel"] {{
            color: #FAFAFA !important;
        }}
        
        /* –≠–∫—Å–ø–∞–Ω–¥–µ—Ä—ã –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ */
        .main .streamlit-expanderHeader {{
            color: #FAFAFA !important;
        }}
        
        .main .streamlit-expanderHeader:hover {{
            color: #66B3FF !important;
        }}
        
        .main .streamlit-expanderHeader[aria-expanded="true"] {{
            color: #0E1117 !important;
            background-color: #66B3FF !important;
        }}
        
        .main .streamlit-expanderIcon {{
            color: #FAFAFA !important;
        }}
        
        .main .streamlit-expanderHeader[aria-expanded="true"] .streamlit-expanderIcon {{
            color: #0E1117 !important;
        }}
    </style>
    """
    
    # –°—Ç–∏–ª–∏ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
    light_theme_css = f"""
    <style>
        /* –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã */
        .main {{
            background-color: #FFFFFF;
            color: #31333F;
        }}
        
        .stApp {{
            background-color: #FFFFFF;
        }}
        
        /* –°–∞–π–¥–±–∞—Ä - –¢–ï–ú–ù–´–ô –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ */
        .css-1d391kg {{
            background-color: #262730;
        }}
        
        /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ - –ë–ï–õ–´–ï –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ (—Ç.–∫. —Å–∞–π–¥–±–∞—Ä —Ç–µ–º–Ω—ã–π) */
        .sidebar-header {{
            color: #FAFAFA !important;
            font-size: {fs['h2']} !important;
        }}
        
        /* –¢–µ–∫—Å—Ç */
        .stMarkdown {{
            color: #31333F;
        }}
        
        h1, h2, h3, h4, h5, h6 {{
            color: #31333F;
        }}
        
        /* –í–∫–ª–∞–¥–∫–∏ - —á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ */
        .stTabs [data-baseweb="tab"] {{
            background-color: #F0F2F6 !important;
            color: #31333F !important;
            font-weight: 600;
        }}
        
        .stTabs [data-baseweb="tab"]:hover {{
            background-color: #E6E9EF !important;
            color: #31333F !important;
        }}
        
        .stTabs [aria-selected="true"] {{
            background-color: #2E86AB !important;
            color: #FFFFFF !important;
        }}
        
        /* –ö–∞—Ä—Ç–æ—á–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏ */
        .result-card {{
            background-color: #F8F9FA;
            color: #31333F;
            border-left: 5px solid #2E86AB;
        }}
        
        .instruction-box {{
            background-color: #E8F4FD;
            color: #31333F;
            border-left: 5px solid #2E86AB;
        }}
        
        .tooltip {{
            background-color: #F0F2F6;
            color: #31333F;
            border-left: 3px solid #2E86AB;
        }}
        
        /* Expanders - –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ */
        .stExpander {{
            border: 1px solid #2E86AB !important;
            border-radius: 5px;
        }}
        
        .stExpander > div > div {{
            background-color: #FFFFFF !important;
            color: #31333F !important;
        }}
        
        /* –ú–µ—Ç—Ä–∏–∫–∏ –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ */
        .stMetric {{
            color: #31333F !important;
        }}
        [data-testid="stMetricValue"], [data-testid="stMetricLabel"] {{
            color: #31333F !important;
        }}
    </style>
    """
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ —à—Ä–∏—Ñ—Ç–æ–≤
    st.markdown(base_css, unsafe_allow_html=True)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    if st.session_state.theme == "dark":
        st.markdown(dark_theme_css, unsafe_allow_html=True)
    else:
        st.markdown(light_theme_css, unsafe_allow_html=True)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def generate_reliability_data(alpha, num_samples=1000, random_state=42):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –∏–∑ –∑–∞–¥–∞–Ω–∏—è"""
    np.random.seed(random_state)
    
    # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Œæ ‚àà [0,1]
    xi = np.random.uniform(0, 1, num_samples)
    
    # 2. –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
    P1_base = uniform.ppf(xi, loc=0, scale=4)          # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ [0,4]
    P2_base = erlang.ppf(xi, 4, scale=1)               # –≠—Ä–ª–∞–Ω–≥–∞ (—Ñ–æ—Ä–º–∞=4, –º–∞—Å—à—Ç–∞–±=1)
    P3_base = norm.ppf(xi, loc=0, scale=3)             # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ N(0,3)
    
    # –†–∞—Å—á–µ—Ç œÉ_i –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    sigma1 = np.sqrt(4**2 / 12)   # –°–ö–û —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ [0,4]
    sigma2 = np.sqrt(4 * 1**2)    # –°–ö–û —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≠—Ä–ª–∞–Ω–≥–∞
    sigma3 = 3                    # –°–ö–û –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ Œµ_i ~ N(0, Œ±*œÉ_i)
    epsilon1 = norm.rvs(loc=0, scale=alpha * sigma1, size=num_samples)
    epsilon2 = norm.rvs(loc=0, scale=alpha * sigma2, size=num_samples)
    epsilon3 = norm.rvs(loc=0, scale=alpha * sigma3, size=num_samples)
    
    P1 = P1_base + epsilon1
    P2 = P2_base + epsilon2
    P3 = P3_base + epsilon3
    
    return P1, P2, P3

def f_test_comparison(rss_simple, rss_complex, df_simple, df_complex, n_samples, alpha=0.05):
    """–ö—Ä–∏—Ç–µ—Ä–∏–π –§–∏—à–µ—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
    f_stat = ((rss_simple - rss_complex) / (df_complex - df_simple)) / (rss_complex / (n_samples - df_complex - 1))
    p_value = 1 - f.cdf(f_stat, df_complex - df_simple, n_samples - df_complex - 1)
    return f_stat, p_value, p_value < alpha

def select_polynomial_degree(X, y, max_degree=5):
    """–ü–æ–¥–±–æ—Ä –ø–æ—Ä—è–¥–∫–∞ –ø–æ–ª–∏–Ω–æ–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏—è –§–∏—à–µ—Ä–∞"""
    n_samples = len(y)
    best_degree = 1
    models = {}
    rss_values = {}
    
    for degree in range(1, max_degree + 1):
        model = Pipeline([
            ('poly', PolynomialFeatures(degree=degree)),
            ('linear', LinearRegression())
        ])
        model.fit(X, y)
        y_pred = model.predict(X)
        rss = np.sum((y - y_pred)**2)
        n_params = PolynomialFeatures(degree=degree).fit_transform(X).shape[1]
        
        models[degree] = model
        rss_values[degree] = (rss, n_params)
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–π –§–∏—à–µ—Ä–∞: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    for degree in range(2, max_degree + 1):
        rss_prev, df_prev = rss_values[degree-1]
        rss_curr, df_curr = rss_values[degree]
        
        f_stat, p_value, significant = f_test_comparison(
            rss_prev, rss_curr, df_prev, df_curr, n_samples
        )
        
        if significant:
            best_degree = degree
        else:
            break
    
    return best_degree, models[best_degree]

def create_scatter_plotly(P1, P2, P3, alpha, title):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—è —Ä–∞—Å—Å–µ—è–Ω–∏—è"""
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=P1, y=P2,
        mode='markers',
        marker=dict(
            size=8,
            color=P3,
            colorscale='Viridis',
            showscale=True,
            colorbar=dict(title="P3")
        ),
        hovertemplate=
        "<b>P1</b>: %{x:.3f}<br>" +
        "<b>P2</b>: %{y:.3f}<br>" +
        "<b>P3</b>: %{marker.color:.3f}<br>" +
        "<extra></extra>"
    ))
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É –¥–ª—è Plotly –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞, –∏–Ω–∞—á–µ —Å–≤–µ—Ç–ª—É—é
    if st.session_state.theme == "dark":
        template = "plotly_dark"
        font_color = "white"
    else:
        template = "plotly_white"
        font_color = "black"
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    fs = font_configs[st.session_state.font_size]
    
    fig.update_layout(
        title=f"{title} (Œ±={alpha})",
        xaxis_title="P1",
        yaxis_title="P2",
        template=template,
        height=500,
        font=dict(
            size=fs['plot_axis'],
            color=font_color
        ),
        title_font=dict(
            size=fs['plot_title'],
            color=font_color
        ),
        paper_bgcolor='white' if st.session_state.theme == "light" else 'rgba(0,0,0,0)',
        plot_bgcolor='white' if st.session_state.theme == "light" else 'rgba(0,0,0,0)'
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –æ—Å–µ–π –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
    if st.session_state.theme == "light":
        fig.update_xaxes(
            linecolor='black',
            gridcolor='lightgray',
            tickfont=dict(color='black')
        )
        fig.update_yaxes(
            linecolor='black',
            gridcolor='lightgray', 
            tickfont=dict(color='black')
        )
    
    return fig

def create_3d_regression_plot(P1, P2, P3, model, alpha, degree):
    """–°–æ–∑–¥–∞–Ω–∏–µ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏"""
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    P1_range = np.linspace(P1.min(), P1.max(), 30)
    P2_range = np.linspace(P2.min(), P2.max(), 30)
    P1_grid, P2_grid = np.meshgrid(P1_range, P2_range)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Å–µ—Ç–∫–µ
    grid_points = np.column_stack((P1_grid.ravel(), P2_grid.ravel()))
    P3_pred_grid = model.predict(grid_points).reshape(P1_grid.shape)
    
    fig = go.Figure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏
    fig.add_trace(go.Scatter3d(
        x=P1, y=P2, z=P3,
        mode='markers',
        marker=dict(
            size=4,
            color=P3,
            colorscale='Viridis',
            opacity=0.7
        ),
        name='–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
    fig.add_trace(go.Surface(
        x=P1_grid, y=P2_grid, z=P3_pred_grid,
        colorscale='Plasma',
        opacity=0.7,
        name=f'–ü–æ–ª–∏–Ω–æ–º {degree}-–π —Å—Ç–µ–ø–µ–Ω–∏'
    ))
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É –¥–ª—è Plotly –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞, –∏–Ω–∞—á–µ —Å–≤–µ—Ç–ª—É—é
    if st.session_state.theme == "dark":
        template = "plotly_dark"
        font_color = "white"
        bg_color = 'rgba(0,0,0,0)'
    else:
        template = "plotly_white"
        font_color = "black"
        bg_color = 'white'
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    fs = font_configs[st.session_state.font_size]
    
    fig.update_layout(
        title=f'–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ü‚ÇÉ = œÜ(–ü‚ÇÅ, –ü‚ÇÇ) (Œ±={alpha}, —Å—Ç–µ–ø–µ–Ω—å={degree})',
        scene=dict(
            xaxis_title='P1',
            yaxis_title='P2', 
            zaxis_title='P3',
            bgcolor=bg_color
        ),
        template=template,
        height=600,
        font=dict(
            size=fs['plot_axis'],
            color=font_color
        ),
        title_font=dict(
            size=fs['plot_title'],
            color=font_color
        ),
        paper_bgcolor=bg_color
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –æ—Å–µ–π –≤ 3D —Å—Ü–µ–Ω–µ
    fig.update_scenes(
        xaxis=dict(
            title_font=dict(size=fs['plot_axis'], color=font_color),
            tickfont=dict(size=fs['plot_legend'], color=font_color)
        ),
        yaxis=dict(
            title_font=dict(size=fs['plot_axis'], color=font_color),
            tickfont=dict(size=fs['plot_legend'], color=font_color)
        ),
        zaxis=dict(
            title_font=dict(size=fs['plot_axis'], color=font_color),
            tickfont=dict(size=fs['plot_legend'], color=font_color)
        )
    )
    
    return fig

def compute_mean_curve(x, y, num_bins=20):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω—é—é –∫—Ä–∏–≤—É—é —á–µ—Ä–µ–∑ –±–∏–Ω–∏–Ω–≥ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç x_bin_centers, y_means
    """
    # –°–æ–∑–¥–∞–µ–º –±–∏–Ω—ã –ø–æ x
    x_min, x_max = x.min(), x.max()
    bins = np.linspace(x_min, x_max, num_bins + 1)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–∞–∂–¥–æ–º –±–∏–Ω–µ
    x_bin_centers = (bins[:-1] + bins[1:]) / 2
    y_means = []
    
    for i in range(len(bins) - 1):
        mask = (x >= bins[i]) & (x < bins[i + 1])
        if np.sum(mask) > 0:
            y_means.append(np.mean(y[mask]))
        else:
            y_means.append(np.nan)
    
    # –£–±–∏—Ä–∞–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
    valid_mask = ~np.isnan(y_means)
    return x_bin_centers[valid_mask], np.array(y_means)[valid_mask]

def add_mean_curves_to_scatter(fig, P1, P2, P3, row, col):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ –∫—Ä–∏–≤—ã–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å—Å–µ—è–Ω–∏—è"""
    
    if col == 1:  # P1-P2 –≥—Ä–∞—Ñ–∏–∫
        # –°—Ä–µ–¥–Ω—è—è –∫—Ä–∏–≤–∞—è P2 –æ—Ç P1
        x_curve, y_curve = compute_mean_curve(P1, P2)
        fig.add_trace(
            go.Scatter(
                x=x_curve, y=y_curve,
                mode='lines+markers',
                line=dict(color='red', width=3),
                marker=dict(size=6, color='red'),
                name='–°—Ä–µ–¥–Ω—è—è P2 –æ—Ç P1',
                showlegend=False
            ), row=row, col=col
        )
        
    elif col == 2:  # P1-P3 –≥—Ä–∞—Ñ–∏–∫
        # –°—Ä–µ–¥–Ω—è—è –∫—Ä–∏–≤–∞—è P3 –æ—Ç P1
        x_curve, y_curve = compute_mean_curve(P1, P3)
        fig.add_trace(
            go.Scatter(
                x=x_curve, y=y_curve,
                mode='lines+markers',
                line=dict(color='red', width=3),
                marker=dict(size=6, color='red'),
                name='–°—Ä–µ–¥–Ω—è—è P3 –æ—Ç P1',
                showlegend=False
            ), row=row, col=col
        )
        
    elif col == 3:  # P2-P3 –≥—Ä–∞—Ñ–∏–∫
        # –°—Ä–µ–¥–Ω—è—è –∫—Ä–∏–≤–∞—è P3 –æ—Ç P2
        x_curve, y_curve = compute_mean_curve(P2, P3)
        fig.add_trace(
            go.Scatter(
                x=x_curve, y=y_curve,
                mode='lines+markers',
                line=dict(color='red', width=3),
                marker=dict(size=6, color='red'),
                name='–°—Ä–µ–¥–Ω—è—è P3 –æ—Ç P2',
                showlegend=False
            ), row=row, col=col
        )

def show_comprehensive_instructions():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
    
    with st.expander("üéØ –¶–µ–ª—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã", expanded=False):
        st.markdown("""
        <div class="instruction-box">
        <h3>üéØ –¶–µ–ª—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã</h3>
        <p>–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ü‚ÇÉ = œÜ(–ü‚ÇÅ, –ü‚ÇÇ) –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–∫–æ–Ω–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è 
        —Ç—Ä–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å —Ä–∞–∑–ª–∏—á–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.</p>
        
        <h3>üîß –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã</h3>
        <ol>
            <li><strong>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª</strong> Œæ ‚àà [0,1]</li>
            <li><strong>–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</strong> —á–µ—Ä–µ–∑ –æ–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π</li>
            <li><strong>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π</strong> Œµ_i ~ N(0, Œ±¬∑œÉ_i)</li>
            <li><strong>–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª–µ–π —Ä–∞—Å—Å–µ—è–Ω–∏—è</strong> –∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏</li>
            <li><strong>–ü–æ–¥–±–æ—Ä –ø–æ—Ä—è–¥–∫–∞ –ø–æ–ª–∏–Ω–æ–º–∞</strong> –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é –§–∏—à–µ—Ä–∞</li>
        </ol>
        
        <h3>üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</h3>
        <ul>
            <li><strong>F‚ÇÅ(–ü)</strong> = –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ [0,4]</li>
            <li><strong>F‚ÇÇ(–ü)</strong> = –≠—Ä–ª–∞–Ω–≥–∞ (—Ñ–æ—Ä–º–∞=4, –º–∞—Å—à—Ç–∞–±=1)</li>
            <li><strong>F‚ÇÉ(–ü)</strong> = –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ N(0,3)</li>
        </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with st.expander("üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞", expanded=False):
        st.markdown("""
        <div class="instruction-box">
        <h3>üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞</h3>
        
        <h4>–ü–∞—Ä–∞–º–µ—Ç—Ä Œ± (—É—Ä–æ–≤–µ–Ω—å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏):</h4>
        <ul>
            <li><strong>Œ± = 0</strong>: –ò–¥–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –±–µ–∑ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏</li>
            <li><strong>Œ± = 0.1</strong>: –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–π</li>
            <li><strong>Œ± = 0.5</strong>: –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–π</li>
            <li><strong>Œ± = 1.0</strong>: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (—Ä–∞–≤–Ω–∞ –°–ö–û —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)</li>
            <li><strong>Œ± = 1.5</strong>: –í—ã—Å–æ–∫–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–π</li>
        </ul>
        
        <h4>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–æ–Ω–æ–≤:</h4>
        <ul>
            <li><strong>100-500</strong>: –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</li>
            <li><strong>500-1000</strong>: –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏</li>
            <li><strong>1000-2000</strong>: –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, –Ω–æ –¥–æ–ª—å—à–µ —Ä–∞—Å—á–µ—Ç</li>
        </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with st.expander("üí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", expanded=False):
        st.markdown("""
        <div class="instruction-box">
        <h3>üí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</h3>
        
        <h4>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:</h4>
        <ul>
            <li><strong>–ù–∞—á–Ω–∏—Ç–µ —Å Œ± = [0.1, 0.5, 1.0]</strong> –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏</li>
            <li><strong>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1000 –ø—Ä–æ–≥–æ–Ω–æ–≤</strong> –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</li>
            <li><strong>–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</strong> –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 100-500 –ø—Ä–æ–≥–æ–Ω–æ–≤</li>
            <li><strong>–í—ã–±–∏—Ä–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π Œ±</strong> –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–ª–∏—è–Ω–∏—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏</li>
        </ul>
        
        <h4>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</h4>
        <ul>
            <li><strong>R¬≤ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏)</strong> –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ (–±–ª–∏–∂–µ –∫ 1 = –ª—É—á—à–µ)</li>
            <li><strong>–°—Ç–µ–ø–µ–Ω—å –ø–æ–ª–∏–Ω–æ–º–∞</strong> –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏</li>
            <li><strong>–û–±—â–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è</strong> —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Ä–∞–∑–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö</li>
            <li><strong>–°—Ä–µ–¥–Ω–∏–µ –∫—Ä–∏–≤—ã–µ</strong> –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π</li>
        </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with st.expander("üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º", expanded=False):
        st.markdown("""
        <div class="instruction-box">
        <h3>üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º</h3>
        
        <h4>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏:</h4>
        <ul>
            <li><strong>üìà –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</strong> - –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏</li>
            <li><strong>üîÑ –ü–æ–ª—è —Ä–∞—Å—Å–µ—è–Ω–∏—è</strong> - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ –∫—Ä–∏–≤—ã–º–∏</li>
            <li><strong>üßÆ –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏</strong> - 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π</li>
            <li><strong>üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</strong> - —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è</li>
            <li><strong>üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</strong> - –Ω–∞—Å—Ç–æ—è—â–µ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º</li>
        </ul>
        
        <h4>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:</h4>
        <ul>
            <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <strong>–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã</strong> –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ —Ä–∞–∑–Ω–æ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏</li>
            <li>–†–µ–≥—É–ª–∏—Ä—É–π—Ç–µ <strong>—Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞</strong> –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è</li>
            <li>–í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ <strong>–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã</strong> - –º–æ–∂–Ω–æ –ø—Ä–∏–±–ª–∏–∂–∞—Ç—å, –≤—ã–¥–µ–ª—è—Ç—å –æ–±–ª–∞—Å—Ç–∏</li>
            <li>–î–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ <strong>—Å–∫–∞—á–∞—Ç—å –≤ CSV</strong> –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</li>
        </ul>
        </div>
        """, unsafe_allow_html=True)

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
    apply_custom_styles()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ
    st.sidebar.markdown('<div class="sidebar-header">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</div>', unsafe_allow_html=True)
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    font_size_options = {
        "–ú–∞–ª–µ–Ω—å–∫–∏–π": "small",
        "–°—Ä–µ–¥–Ω–∏–π": "medium", 
        "–ë–æ–ª—å—à–æ–π": "large"
    }
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    theme_options = {
        "—Å–≤–µ—Ç–ª–∞—è": "light",
        "—Ç—ë–º–Ω–∞—è": "dark"
    }
    
    # –í—ã–±–æ—Ä —Ç–µ–º—ã —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    theme_display = st.sidebar.radio(
        "üé® –¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–∞:",
        ["—Å–≤–µ—Ç–ª–∞—è", "—Ç—ë–º–Ω–∞—è"],
        index=1 if st.session_state.theme == "dark" else 0,
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–µ—Ç–ª—É—é –∏–ª–∏ —Ç–µ–º–Ω—É—é —Ç–µ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º—ã
    selected_theme = theme_options[theme_display]
    
    if selected_theme != st.session_state.theme:
        st.session_state.theme = selected_theme
        st.rerun()
    
    # –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    font_size_display = st.sidebar.selectbox(
        "üî§ –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞:",
        ["–ú–∞–ª–µ–Ω—å–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ë–æ–ª—å—à–æ–π"],
        index=["–ú–∞–ª–µ–Ω—å–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ë–æ–ª—å—à–æ–π"].index(
            next(key for key, value in font_size_options.items() if value == st.session_state.font_size)
        ),
        help="–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è"
    )
    
    if font_size_options[font_size_display] != st.session_state.font_size:
        st.session_state.font_size = font_size_options[font_size_display]
        st.rerun()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    st.sidebar.markdown('<div class="sidebar-header">üß™ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞</div>', unsafe_allow_html=True)
    
    num_samples = st.sidebar.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–æ–Ω–æ–≤", 
        100, 2000, 1000, 100,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö. –ë–æ–ª—å—à–µ –ø—Ä–æ–≥–æ–Ω–æ–≤ = —Ç–æ—á–Ω–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –¥–æ–ª—å—à–µ —Ä–∞—Å—á–µ—Ç."
    )
    
    alphas = st.sidebar.multiselect(
        "–ó–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ Œ±", 
        [0, 0.1, 0.5, 1.0, 1.5], 
        default=[0.1, 0.5, 1.0, 1.5],
        help="–£—Ä–æ–≤–µ–Ω—å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π. Œ±=0 - –±–µ–∑ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏, Œ±=1.0 - –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å —Ä–∞–≤–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é."
    )
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 style="text-align: center; margin-bottom: 2rem;">üìä –ê–Ω–∞–ª–∏–∑ –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏</h1>', unsafe_allow_html=True)
    
    if st.sidebar.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—á–µ—Ç", type="primary"):
        if not alphas:
            st.sidebar.error("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ Œ±")
        else:
            with st.spinner("–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Ä–∞—Å—á–µ—Ç—ã..."):
                results = []
                all_data = []
                
                progress_bar = st.progress(0)
                
                for i, alpha in enumerate(alphas):
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                    P1, P2, P3 = generate_reliability_data(alpha, num_samples)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    for j in range(num_samples):
                        all_data.append([alpha, j+1, P1[j], P2[j], P3[j]])
                    
                    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                    X = np.column_stack((P1, P2))
                    y = P3
                    
                    best_degree, best_model = select_polynomial_degree(X, y, max_degree=5)
                    
                    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
                    y_pred = best_model.predict(X)
                    r2 = 1 - np.sum((y - y_pred)**2) / np.sum((y - np.mean(y))**2)
                    
                    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏
                    cov_matrix = np.cov(np.column_stack((P1, P2, P3)), rowvar=False)
                    total_variance = np.trace(cov_matrix)
                    
                    results.append({
                        'alpha': alpha,
                        'best_degree': best_degree,
                        'r2_score': r2,
                        'total_variance': total_variance,
                        'model': best_model,
                        'P1': P1,
                        'P2': P2, 
                        'P3': P3
                    })
                    
                    progress_bar.progress((i + 1) / len(alphas))
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ session_state
                st.session_state.results = results
                st.session_state.all_data = all_data
                
                st.success("‚úÖ –†–∞—Å—á–µ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.session_state.results is not None:
        results = st.session_state.results
        all_data = st.session_state.all_data
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        df_results = pd.DataFrame([{
            'Œ±': r['alpha'],
            '–°—Ç–µ–ø–µ–Ω—å –ø–æ–ª–∏–Ω–æ–º–∞': r['best_degree'], 
            'R¬≤': r['r2_score'],
            '–û–±—â–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è': r['total_variance']
        } for r in results])
        
        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìà –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üîÑ –ü–æ–ª—è —Ä–∞—Å—Å–µ—è–Ω–∏—è", "üßÆ –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏", "üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"])
        
        with tab1:
            st.markdown('<h2 style="border-bottom: 2px solid; padding-bottom: 0.5rem; margin-top: 2rem;">–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏</h2>', unsafe_allow_html=True)
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
            cols = st.columns(len(results))
            for i, (col, result) in enumerate(zip(cols, results)):
                with col:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
                    if st.session_state.theme == "dark":
                        gradient = "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
                    else:
                        gradient = "linear-gradient(135deg, #1f77b4 0%, #2E86AB 100%)"
                    
                    st.markdown(f"""
                    <div style="background: {gradient}; color: white; padding: 1rem; border-radius: 10px; text-align: center; font-size: {font_configs[st.session_state.font_size]['metric']}px;">
                        <h3>Œ± = {result['alpha']}</h3>
                        <h4>–°—Ç–µ–ø–µ–Ω—å: {result['best_degree']}</h4>
                        <p>R¬≤ = {result['r2_score']:.4f}</p>
                        <p>–î–∏—Å–ø–µ—Ä—Å–∏—è = {result['total_variance']:.2f}</p>
                    </div>
                    """, unsafe_allow_html=True)
            
            # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ R¬≤ –æ—Ç Œ±
            st.markdown('<h2 style="border-bottom: 2px solid; padding-bottom: 0.5rem; margin-top: 2rem;">–í–ª–∏—è–Ω–∏–µ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏</h2>', unsafe_allow_html=True)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É –¥–ª—è Plotly –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞, –∏–Ω–∞—á–µ —Å–≤–µ—Ç–ª—É—é
            if st.session_state.theme == "dark":
                template = "plotly_dark"
                font_color = "white"
                bg_color = 'rgba(0,0,0,0)'
            else:
                template = "plotly_white"
                font_color = "black"
                bg_color = 'white'
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            fs = font_configs[st.session_state.font_size]
            
            fig_r2 = go.Figure()
            fig_r2.add_trace(go.Scatter(
                x=[r['alpha'] for r in results],
                y=[r['r2_score'] for r in results],
                mode='lines+markers',
                marker=dict(size=12),
                line=dict(width=3)
            ))
            
            fig_r2.update_layout(
                title="–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å R¬≤ –æ—Ç —É—Ä–æ–≤–Ω—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ Œ±",
                xaxis_title="Œ±",
                yaxis_title="R¬≤",
                template=template,
                height=400,
                font=dict(
                    size=fs['plot_axis'],
                    color=font_color
                ),
                title_font=dict(
                    size=fs['plot_title'],
                    color=font_color
                ),
                xaxis=dict(
                    title_font=dict(size=fs['plot_axis']),
                    tickfont=dict(size=fs['plot_legend'])
                ),
                yaxis=dict(
                    title_font=dict(size=fs['plot_axis']),
                    tickfont=dict(size=fs['plot_legend'])
                ),
                paper_bgcolor=bg_color,
                plot_bgcolor=bg_color
            )
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –æ—Å–µ–π –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
            if st.session_state.theme == "light":
                fig_r2.update_xaxes(
                    linecolor='black',
                    gridcolor='lightgray',
                    tickfont=dict(color='black')
                )
                fig_r2.update_yaxes(
                    linecolor='black',
                    gridcolor='lightgray', 
                    tickfont=dict(color='black')
                )
            
            st.plotly_chart(fig_r2, use_container_width=True)
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.markdown('<h2 style="border-bottom: 2px solid; padding-bottom: 0.5rem; margin-top: 2rem;">–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h2>', unsafe_allow_html=True)
            
            analysis_text = """
            **–ù–∞–±–ª—é–¥–∞–µ–º—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏:**
            - –° —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º Œ± (–ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π) –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ R¬≤ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ —Å–Ω–∏–∂–∞–µ—Ç—Å—è
            - –ü—Ä–∏ –º–∞–ª—ã—Ö Œ± –∫—Ä–∏—Ç–µ—Ä–∏–π –§–∏—à–µ—Ä–∞ –≤—ã–±–∏—Ä–∞–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–≤—ã—Å–æ–∫–∏–µ —Å—Ç–µ–ø–µ–Ω–∏ –ø–æ–ª–∏–Ω–æ–º–æ–≤)
            - –ü—Ä–∏ –±–æ–ª—å—à–∏—Ö Œ± –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
            - –û–±—â–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ç–µ—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º Œ±
            """
            
            st.markdown(analysis_text)
        
        with tab2:
            st.markdown('<h2 style="border-bottom: 2px solid; padding-bottom: 0.5rem; margin-top: 2rem;">–ü–æ–ª—è —Ä–∞—Å—Å–µ—è–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</h2>', unsafe_allow_html=True)
            st.markdown("""
            **–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –≥—Ä–∞—Ñ–∏–∫–∞–º:**
            - **–ö—Ä–∞—Å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏**: —Å—Ä–µ–¥–Ω–∏–µ –∫—Ä–∏–≤—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥—Ä—É–≥–æ–π
            - **–¶–≤–µ—Ç —Ç–æ—á–µ–∫**: –æ—Ç—Ä–∞–∂–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ü–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞)
            - **–°—Ä–µ–¥–Ω—è—è –∫—Ä–∏–≤–∞—è** –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –±–∏–Ω—ã –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–∞–∂–¥–æ–º –±–∏–Ω–µ
            """)
            
            for result in results:
                alpha = result['alpha']
                
                st.markdown(f"### –ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ Œ± = {alpha}")
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                fig_scatter = make_subplots(
                    rows=1, cols=3,
                    subplot_titles=[
                        f'P1-P2 (Œ±={alpha}) - –°—Ä–µ–¥–Ω—è—è P2 –æ—Ç P1', 
                        f'P1-P3 (Œ±={alpha}) - –°—Ä–µ–¥–Ω—è—è P3 –æ—Ç P1', 
                        f'P2-P3 (Œ±={alpha}) - –°—Ä–µ–¥–Ω—è—è P3 –æ—Ç P2'
                    ]
                )
                
                # P1-P2
                fig_scatter.add_trace(
                    go.Scatter(
                        x=result['P1'], y=result['P2'],
                        mode='markers',
                        marker=dict(
                            size=5, 
                            color=result['P3'], 
                            colorscale='Viridis', 
                            showscale=False,
                            opacity=0.6
                        ),
                        name='P1-P2',
                        hovertemplate=
                        "<b>P1</b>: %{x:.3f}<br>" +
                        "<b>P2</b>: %{y:.3f}<br>" +
                        "<b>P3</b>: %{marker.color:.3f}<br>" +
                        "<extra></extra>"
                    ), row=1, col=1
                )
                
                # P1-P3  
                fig_scatter.add_trace(
                    go.Scatter(
                        x=result['P1'], y=result['P3'],
                        mode='markers', 
                        marker=dict(
                            size=5, 
                            color=result['P2'], 
                            colorscale='Plasma', 
                            showscale=False,
                            opacity=0.6
                        ),
                        name='P1-P3',
                        hovertemplate=
                        "<b>P1</b>: %{x:.3f}<br>" +
                        "<b>P3</b>: %{y:.3f}<br>" +
                        "<b>P2</b>: %{marker.color:.3f}<br>" +
                        "<extra></extra>"
                    ), row=1, col=2
                )
                
                # P2-P3
                fig_scatter.add_trace(
                    go.Scatter(
                        x=result['P2'], y=result['P3'],
                        mode='markers',
                        marker=dict(
                            size=5, 
                            color=result['P1'], 
                            colorscale='Rainbow', 
                            showscale=False,
                            opacity=0.6
                        ),
                        name='P2-P3',
                        hovertemplate=
                        "<b>P2</b>: %{x:.3f}<br>" +
                        "<b>P3</b>: %{y:.3f}<br>" +
                        "<b>P1</b>: %{marker.color:.3f}<br>" +
                        "<extra></extra>"
                    ), row=1, col=3
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∫—Ä–∏–≤—ã–µ –Ω–∞ –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏
                add_mean_curves_to_scatter(
                    fig_scatter, 
                    result['P1'], result['P2'], result['P3'],
                    row=1, col=1
                )
                add_mean_curves_to_scatter(
                    fig_scatter, 
                    result['P1'], result['P2'], result['P3'],
                    row=1, col=2
                )
                add_mean_curves_to_scatter(
                    fig_scatter, 
                    result['P1'], result['P2'], result['P3'],
                    row=1, col=3
                )
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É –¥–ª—è Plotly –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞, –∏–Ω–∞—á–µ —Å–≤–µ—Ç–ª—É—é
                if st.session_state.theme == "dark":
                    template = "plotly_dark"
                    font_color = "white"
                    bg_color = 'rgba(0,0,0,0)'
                else:
                    template = "plotly_white"
                    font_color = "black"
                    bg_color = 'white'
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                fs = font_configs[st.session_state.font_size]
                
                fig_scatter.update_layout(
                    height=500, 
                    showlegend=False,
                    title_text=f"–ü–æ–ª—è —Ä–∞—Å—Å–µ—è–Ω–∏—è —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ –∫—Ä–∏–≤—ã–º–∏ (Œ±={alpha})",
                    template=template,
                    font=dict(
                        size=fs['plot_axis'],
                        color=font_color
                    ),
                    title_font=dict(
                        size=fs['plot_title'],
                        color=font_color
                    ),
                    paper_bgcolor=bg_color,
                    plot_bgcolor=bg_color
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–æ–≤
                fig_scatter.update_annotations(
                    font_size=fs['plot_axis'],
                    font_color=font_color
                )
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
                fig_scatter.update_xaxes(
                    title_text="P1", 
                    title_font=dict(size=fs['plot_axis'], color=font_color),
                    tickfont=dict(size=fs['plot_legend'], color=font_color)
                )
                fig_scatter.update_xaxes(
                    title_text="P1", 
                    title_font=dict(size=fs['plot_axis'], color=font_color),
                    tickfont=dict(size=fs['plot_legend'], color=font_color),
                    row=1, col=2
                )
                fig_scatter.update_xaxes(
                    title_text="P2", 
                    title_font=dict(size=fs['plot_axis'], color=font_color),
                    tickfont=dict(size=fs['plot_legend'], color=font_color),
                    row=1, col=3
                )
                fig_scatter.update_yaxes(
                    title_text="P2", 
                    title_font=dict(size=fs['plot_axis'], color=font_color),
                    tickfont=dict(size=fs['plot_legend'], color=font_color),
                    row=1, col=1
                )
                fig_scatter.update_yaxes(
                    title_text="P3", 
                    title_font=dict(size=fs['plot_axis'], color=font_color),
                    tickfont=dict(size=fs['plot_legend'], color=font_color),
                    row=1, col=2
                )
                fig_scatter.update_yaxes(
                    title_text="P3", 
                    title_font=dict(size=fs['plot_axis'], color=font_color),
                    tickfont=dict(size=fs['plot_legend'], color=font_color),
                    row=1, col=3
                )
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –æ—Å–µ–π –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
                if st.session_state.theme == "light":
                    for i in range(1, 4):
                        fig_scatter.update_xaxes(
                            linecolor='black',
                            gridcolor='lightgray',
                            tickfont=dict(color='black'),
                            row=1, col=i
                        )
                        fig_scatter.update_yaxes(
                            linecolor='black',
                            gridcolor='lightgray', 
                            tickfont=dict(color='black'),
                            row=1, col=i
                        )
                
                st.plotly_chart(fig_scatter, use_container_width=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è Œ±
                with st.expander(f"–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å—Ä–µ–¥–Ω–∏—Ö –∫—Ä–∏–≤—ã—Ö –¥–ª—è Œ± = {alpha}"):
                    st.markdown(f"""
                    **–°—Ä–µ–¥–Ω–∏–µ –∫—Ä–∏–≤—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç:**
                    
                    **–ì—Ä–∞—Ñ–∏–∫ P1-P2:** –ö–∞–∫ –≤ —Å—Ä–µ–¥–Ω–µ–º –∏–∑–º–µ–Ω—è–µ—Ç—Å—è P2 –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ P1
                    **–ì—Ä–∞—Ñ–∏–∫ P1-P3:** –ö–∞–∫ –≤ —Å—Ä–µ–¥–Ω–µ–º –∏–∑–º–µ–Ω—è–µ—Ç—Å—è P3 –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ P1  
                    **–ì—Ä–∞—Ñ–∏–∫ P2-P3:** –ö–∞–∫ –≤ —Å—Ä–µ–¥–Ω–µ–º –∏–∑–º–µ–Ω—è–µ—Ç—Å—è P3 –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ P2
                    
                    **–ü—Ä–∏ Œ± = {alpha}:**
                    - –°—Ä–µ–¥–Ω–∏–µ –∫—Ä–∏–≤—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–Ω–¥–µ–Ω—Ü–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                    - –†–∞–∑–±—Ä–æ—Å —Ç–æ—á–µ–∫ –≤–æ–∫—Ä—É–≥ —Å—Ä–µ–¥–Ω–µ–π –∫—Ä–∏–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
                    - {'–ß–µ—Ç–∫–æ –≤–∏–¥–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏' if alpha <= 0.5 else '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ —Å–∫—Ä—ã—Ç–∞ —à—É–º–æ–º'}
                    """)
        
        with tab3:
            st.markdown('<h2 style="border-bottom: 2px solid; padding-bottom: 0.5rem; margin-top: 2rem;">3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</h2>', unsafe_allow_html=True)
            
            for result in results:
                alpha = result['alpha']
                degree = result['best_degree']
                
                st.markdown(f"### –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è Œ± = {alpha}")
                
                fig_3d = create_3d_regression_plot(
                    result['P1'], result['P2'], result['P3'],
                    result['model'], alpha, degree
                )
                
                st.plotly_chart(fig_3d, use_container_width=True)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–°—Ç–µ–ø–µ–Ω—å –ø–æ–ª–∏–Ω–æ–º–∞", degree)
                with col2:
                    st.metric("R¬≤", f"{result['r2_score']:.4f}")
                with col3:
                    st.metric("–û–±—â–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è", f"{result['total_variance']:.2f}")
                
                st.markdown("---")
        
        with tab4:
            st.markdown('<h2 style="border-bottom: 2px solid; padding-bottom: 0.5rem; margin-top: 2rem;">–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏–π</h2>', unsafe_allow_html=True)
            
            # –°–æ–∑–¥–∞–µ–º DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            df_data = pd.DataFrame(all_data, columns=['alpha', '–ù–æ–º–µ—Ä', 'P1', 'P2', 'P3'])
            
            # –§–∏–ª—å—Ç—Ä –ø–æ alpha
            selected_alpha = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å Œ± –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:", alphas)
            
            df_filtered = df_data[df_data['alpha'] == selected_alpha].head(100)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫
            
            st.dataframe(df_filtered, use_container_width=True)
            
            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            csv = df_data.to_csv(index=False)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (CSV)",
                data=csv,
                file_name="reliability_data.csv",
                mime="text/csv"
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            st.markdown("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            st.dataframe(df_data.groupby('alpha').agg({
                'P1': ['mean', 'std', 'min', 'max'],
                'P2': ['mean', 'std', 'min', 'max'], 
                'P3': ['mean', 'std', 'min', 'max']
            }).round(4))
        
        with tab5:
            show_comprehensive_instructions()
    
    else:
        # –ï—Å–ª–∏ —Ä–∞—Å—á–µ—Ç—ã –µ—â–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –Ω–∞ –≥–ª–∞–≤–Ω–æ–π
        show_comprehensive_instructions()
        
        st.info("üëà –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—á–µ—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")

if __name__ == "__main__":
    main()